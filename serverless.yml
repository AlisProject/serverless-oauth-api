service: ${env:ALIS_APP_ID}

provider:
  name: aws
  region: ${env:AWS_DEFAULT_REGION}
  runtime: python3.7
  stage: oauth2
  endpointType: regional
  memorySize: 256
  environment:
    AUTHLETE_API_KEY: ${ssm:${env:ALIS_APP_ID}ssmAuthleteApiKey}
    AUTHLETE_API_SECRET: ${ssm:${env:ALIS_APP_ID}ssmAuthleteApiSecret}
    COGNITO_USER_POOL_ID: ${ssm:${env:ALIS_APP_ID}ssmCognitoUserPoolId}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminGetUser"
      Resource:
        - "arn:aws:cognito-idp:${self:provider.region}:*:userpool/${ssm:${env:ALIS_APP_ID}ssmCognitoUserPoolId}"

package:
  exclude:
     - '**'
     - '!lambdas/**'
     - '!lib/**'

functions:
  authorization:
    handler: lambdas/http/authorization.handler
    events:
      - http:
          path: /authorization
          method: post
          cors: true
  discovery:
    handler: lambdas/http/well_known/openid_configuration.handler
    events:
      - http:
          path: /.well-known/openid-configuration
          method: get
          cors: true
  introspection:
    handler: lambdas/http/introspection.handler
    events:
      - http:
          path: /introspection
          method: post
  jwks:
    handler: lambdas/http/jwks.handler
    events:
      - http:
          path: /jwks
          method: get
          cors: true
  userinfo:
    handler: lambdas/http/userinfo.handler
    events:
      - http:
          path: /userinfo
          method: get
          cors: true
  token:
    handler: lambdas/http/token.handler
    events:
      - http:
          path: /token
          method: post
          cors: true

custom:
  pythonRequirements:
    dockerizePip: false
    pythonBin: ${self:provider.runtime}
    fileName: requirements-prod.txt
  prune:
    automatic: true
    number: 3

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin
  - alis-packaging
